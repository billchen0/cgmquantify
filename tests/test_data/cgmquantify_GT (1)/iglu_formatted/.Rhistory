df <- read.csv("20-24_medicaid_eligible_zipcodes.csv")
df <- read.csv("20-24_medicaid_eligible_zipcodes.csv")
df <- read.csv("20-24_medicaid_eligible_zipcodes.csv")
df <- read.csv("20-24_medicaid_eligible_zipcodes.csv")
df <- read.csv("20-24_medicaid_eligible_zipcodes.csv")
df <- read.csv("medicaid_eligible_zipcodes.csv")
library(ggplot2)
library(dplyr)
library(iglu)
# Set the directory where the reformatted .csv files are stored
# Some tips:
# 1. Change the directory name to your specific directory
# 2. Change \ to / on the directory name (or will give an error)
setwd("C:/Users/jvaldovin/Desktop/cgmquantify-practice/iglu_formatted")
# Get the list of all .CSV files in the directory matching the pattern
# This only works for these specific Dexcom file formats.
# This line matches "Dexcom_XX_iglu.csv" naming convention
files <- list.files(pattern = "^Dexcom_\\d{2}\\_iglu.csv$")
for (file in files) {
# Extract "XX" from file name - XX is a number from 01 to N subjects
file_id <- gsub("Dexcom_(\\d{2})\\_iglu.csv", "\\1", file)
# Read the CSV file
df <- read.csv(file)
# Assign the data frame to a variable dynamically
assign(paste0("df_", file_id), df)
}
# Removes the last data frame variable from the for loop
rm(df)
# Get a list of all dataframes created with assign()
df_names <- ls(pattern = "^df_\\d{2}$")  # Finds df_01, df_02, ..., df_16
df_list <- mget(df_names)  # Retrieves them as a list
# Combine all dataframes into one to use visualisations from iglu
combined_df <- bind_rows(df_list)
## Get all measures from 16 subjects and save them (combine later)
active_pct_all <- active_percent(combined_df, tz = "GMT") #gives time zone error
adrr_all <- adrr(combined_df)
auc_all <- auc(combined_df)
cogi_all <- cogi(combined_df)
conga_all <- conga(combined_df)
cv_all <- cv_glu(combined_df)
cvm_all <- cv_measures(combined_df)
ae1c_all <- ea1c(combined_df)
gmi_all <- gmi(combined_df)
grade_all <- grade(combined_df)
grade_eugly_all <- grade_eugly(combined_df)
grade_hyper_all <- grade_hyper(combined_df)
grade_hypo_all <- grade_hypo(combined_df)
gvp_all <- gvp(combined_df)
hbgi_all <- hbgi(combined_df)
lbgi_all <- lbgi(combined_df)
igc_all <- igc(combined_df)
iqr_all <- iqr_glu(combined_df)
j_index_all <- j_index(combined_df)
mad_all <- mad_glu(combined_df)
mag_all <- mag(combined_df)
mage_al <- mage(combined_df)
mean_all <- mean_glu(combined_df)
median_all <- median_glu(combined_df)
modd_all <- modd(combined_df)
m_value_all <- m_value(combined_df)
above_pct_all <- above_percent(combined_df)
below_pct_all <- below_percent(combined_df)
pct_in_all <- in_range_percent(combined_df)
quantiles_all <- quantile_glu(combined_df)
range_all <- range_glu(combined_df)
roc_all <- roc(combined_df)
sd_roc_all <- sd_roc(combined_df)
sd_all <- sd_glu(combined_df)
sd_measures_all <- sd_measures(combined_df, tz = "GMT") #gives time zone error
all_objects <- ls()
# Filter only data frames without numbers in their names
df_names_no_numbers <- all_objects[
sapply(all_objects, function(obj) is.data.frame(get(obj))) &
!grepl("[0-9]", all_objects)
]
# Collect these data frames into a list
df_list <- lapply(df_names_no_numbers, get)
View(df_list)
roc(df_01)
roc_all <- roc(combined_df,timelag = 15, dt0 = NULL, inter_gap = 45, tz = "")
View(roc_all)
roc_all <- roc(combined_df,timelag = 15, dt0 = NULL, inter_gap = 45, tz = "GMT")
View(roc_all)
library(ggplot2)
library(dplyr)
library(iglu)
# Set the directory where the reformatted .csv files are stored
# Some tips:
# 1. Change the directory name to your specific directory
# 2. Change \ to / on the directory name (or will give an error)
setwd("C:/Users/jvaldovin/Desktop/cgmquantify-practice/iglu_formatted")
# Get the list of all .CSV files in the directory matching the pattern
# This only works for these specific Dexcom file formats.
# This line matches "Dexcom_XX_iglu.csv" naming convention
files <- list.files(pattern = "^Dexcom_\\d{2}\\_iglu.csv$")
for (file in files) {
# Extract "XX" from file name - XX is a number from 01 to N subjects
file_id <- gsub("Dexcom_(\\d{2})\\_iglu.csv", "\\1", file)
# Read the CSV file
df <- read.csv(file)
# Assign the data frame to a variable dynamically
assign(paste0("df_", file_id), df)
}
# Removes the last data frame variable from the for loop
rm(df)
# Get a list of all dataframes created with assign()
df_names <- ls(pattern = "^df_\\d{2}$")  # Finds df_01, df_02, ..., df_16
df_list <- mget(df_names)  # Retrieves them as a list
# Combine all dataframes into one to use visualisations from iglu
combined_df <- bind_rows(df_list)
## Get all measures from 16 subjects and save them (combine later)
active_pct_all <- active_percent(combined_df, tz = "GMT") #gives time zone error
adrr_all <- adrr(combined_df)
auc_all <- auc(combined_df)
cogi_all <- cogi(combined_df)
conga_all <- conga(combined_df)
cv_all <- cv_glu(combined_df)
cvm_all <- cv_measures(combined_df)
ae1c_all <- ea1c(combined_df)
gmi_all <- gmi(combined_df)
grade_all <- grade(combined_df)
grade_eugly_all <- grade_eugly(combined_df)
grade_hyper_all <- grade_hyper(combined_df)
grade_hypo_all <- grade_hypo(combined_df)
gvp_all <- gvp(combined_df)
hbgi_all <- hbgi(combined_df)
lbgi_all <- lbgi(combined_df)
igc_all <- igc(combined_df)
iqr_all <- iqr_glu(combined_df)
j_index_all <- j_index(combined_df)
mad_all <- mad_glu(combined_df)
mag_all <- mag(combined_df)
mage_al <- mage(combined_df)
mean_all <- mean_glu(combined_df)
median_all <- median_glu(combined_df)
modd_all <- modd(combined_df)
m_value_all <- m_value(combined_df)
above_pct_all <- above_percent(combined_df)
below_pct_all <- below_percent(combined_df)
pct_in_all <- in_range_percent(combined_df)
quantiles_all <- quantile_glu(combined_df)
range_all <- range_glu(combined_df)
#roc_all <- roc(combined_df,timelag = 15, dt0 = NULL, inter_gap = 45, tz = "GMT")
sd_roc_all <- sd_roc(combined_df)
sd_all <- sd_glu(combined_df)
sd_measures_all <- sd_measures(combined_df, tz = "GMT") #gives time zone error
all_objects <- ls()
# Filter only data frames without numbers in their names
df_names_no_numbers <- all_objects[
sapply(all_objects, function(obj) is.data.frame(get(obj))) &
!grepl("[0-9]", all_objects)
]
# Collect these data frames into a list
df_list <- lapply(df_names_no_numbers, get)
# Merge all data frames by 'subject_id' using Reduce
combined_metrics_df <- Reduce(function(x, y) merge(x, y, by = "id", all = TRUE), df_list)
View(combined_metrics_df)
library(ggplot2)
library(dplyr)
library(iglu)
# Set the directory where the reformatted .csv files are stored
# Some tips:
# 1. Change the directory name to your specific directory
# 2. Change \ to / on the directory name (or will give an error)
setwd("C:/Users/jvaldovin/Desktop/cgmquantify-practice/iglu_formatted")
# Get the list of all .CSV files in the directory matching the pattern
# This only works for these specific Dexcom file formats.
# This line matches "Dexcom_XX_iglu.csv" naming convention
files <- list.files(pattern = "^Dexcom_\\d{2}\\_iglu.csv$")
for (file in files) {
# Extract "XX" from file name - XX is a number from 01 to N subjects
file_id <- gsub("Dexcom_(\\d{2})\\_iglu.csv", "\\1", file)
# Read the CSV file
df <- read.csv(file)
# Assign the data frame to a variable dynamically
assign(paste0("df_", file_id), df)
}
# Removes the last data frame variable from the for loop
rm(df)
# Get a list of all dataframes created with assign()
df_names <- ls(pattern = "^df_\\d{2}$")  # Finds df_01, df_02, ..., df_16
df_list <- mget(df_names)  # Retrieves them as a list
# Combine all dataframes into one to use visualisations from iglu
combined_df <- bind_rows(df_list)
## Get all measures from 16 subjects and save them (combine later)
active_pct_all <- active_percent(combined_df, tz = "GMT") #gives time zone error
adrr_all <- adrr(combined_df)
auc_all <- auc(combined_df)
cogi_all <- cogi(combined_df)
conga_all <- conga(combined_df)
cv_all <- cv_glu(combined_df)
cvm_all <- cv_measures(combined_df)
ae1c_all <- ea1c(combined_df)
gmi_all <- gmi(combined_df)
grade_all <- grade(combined_df)
grade_eugly_all <- grade_eugly(combined_df)
grade_hyper_all <- grade_hyper(combined_df)
grade_hypo_all <- grade_hypo(combined_df)
gvp_all <- gvp(combined_df)
hbgi_all <- hbgi(combined_df)
lbgi_all <- lbgi(combined_df)
igc_all <- igc(combined_df)
iqr_all <- iqr_glu(combined_df)
j_index_all <- j_index(combined_df)
mad_all <- mad_glu(combined_df)
mag_all <- mag(combined_df)
mage_al <- mage(combined_df)
mean_all <- mean_glu(combined_df)
median_all <- median_glu(combined_df)
modd_all <- modd(combined_df)
m_value_all <- m_value(combined_df)
above_pct_all <- above_percent(combined_df)
below_pct_all <- below_percent(combined_df)
pct_in_all <- in_range_percent(combined_df)
quantiles_all <- quantile_glu(combined_df)
range_all <- range_glu(combined_df)
#roc_all <- roc(combined_df,timelag = 15, dt0 = NULL, inter_gap = 45, tz = "GMT")
sd_roc_all <- sd_roc(combined_df)
sd_all <- sd_glu(combined_df)
sd_measures_all <- sd_measures(combined_df, tz = "GMT") #gives time zone error
all_objects <- ls()
# Filter only data frames without numbers in their names
df_names_no_numbers <- all_objects[
sapply(all_objects, function(obj) is.data.frame(get(obj))) &
!grepl("[0-9]", all_objects)
]
# Collect these data frames into a list
df_list2 <- lapply(df_names_no_numbers, get)
# Merge all data frames by 'subject_id' using Reduce
combined_metrics_df <- Reduce(function(x, y) merge(x, y, by = "id", all = TRUE), df_list2)
View(combined_metrics_df)
cogi(df_01)
view(df_list2)
view(df_names_no_numbers)
print(df_names_no_numbers)
View(above_pct_all)
View(active_pct_all)
View(adrr_all)
View(ae1c_all)
View(combined_df)
library(ggplot2)
library(dplyr)
library(iglu)
# Set the directory where the reformatted .csv files are stored
# Some tips:
# 1. Change the directory name to your specific directory
# 2. Change \ to / on the directory name (or will give an error)
setwd("C:/Users/jvaldovin/Desktop/cgmquantify-practice/iglu_formatted")
# Get the list of all .CSV files in the directory matching the pattern
# This only works for these specific Dexcom file formats.
# This line matches "Dexcom_XX_iglu.csv" naming convention
files <- list.files(pattern = "^Dexcom_\\d{2}\\_iglu.csv$")
for (file in files) {
# Extract "XX" from file name - XX is a number from 01 to N subjects
file_id <- gsub("Dexcom_(\\d{2})\\_iglu.csv", "\\1", file)
# Read the CSV file
df <- read.csv(file)
# Assign the data frame to a variable dynamically
assign(paste0("df_", file_id), df)
}
# Removes the last data frame variable from the for loop
rm(df)
# Get a list of all dataframes created with assign()
df_names <- ls(pattern = "^df_\\d{2}$")  # Finds df_01, df_02, ..., df_16
df_list <- mget(df_names)  # Retrieves them as a list
# Combine all dataframes into one to use visualisations from iglu
combined_df1 <- bind_rows(df_list)
## Get all measures from 16 subjects and save them (combine later)
active_pct_all <- active_percent(combined_df, tz = "GMT") #gives time zone error
adrr_all <- adrr(combined_df)
auc_all <- auc(combined_df)
cogi_all <- cogi(combined_df)
conga_all <- conga(combined_df)
cv_all <- cv_glu(combined_df)
cvm_all <- cv_measures(combined_df)
ae1c_all <- ea1c(combined_df)
gmi_all <- gmi(combined_df)
grade_all <- grade(combined_df)
grade_eugly_all <- grade_eugly(combined_df)
grade_hyper_all <- grade_hyper(combined_df)
grade_hypo_all <- grade_hypo(combined_df)
gvp_all <- gvp(combined_df)
hbgi_all <- hbgi(combined_df)
lbgi_all <- lbgi(combined_df)
igc_all <- igc(combined_df)
iqr_all <- iqr_glu(combined_df)
j_index_all <- j_index(combined_df)
mad_all <- mad_glu(combined_df)
mag_all <- mag(combined_df)
mage_all <- mage(combined_df)
mean_all <- mean_glu(combined_df)
median_all <- median_glu(combined_df)
modd_all <- modd(combined_df)
m_value_all <- m_value(combined_df)
above_pct_all <- above_percent(combined_df)
below_pct_all <- below_percent(combined_df)
pct_in_all <- in_range_percent(combined_df)
quantiles_all <- quantile_glu(combined_df)
range_all <- range_glu(combined_df)
#roc_all <- roc(combined_df,timelag = 15, dt0 = NULL, inter_gap = 45, tz = "GMT")
sd_roc_all <- sd_roc(combined_df)
sd_all <- sd_glu(combined_df)
sd_measures_all <- sd_measures(combined_df, tz = "GMT") #gives time zone error
all_objects <- ls()
# Filter only data frames without numbers in their names
df_names_no_numbers <- all_objects[
sapply(all_objects, function(obj) is.data.frame(get(obj))) &
!grepl("[0-9]", all_objects)
]
# Collect these data frames into a list
df_list2 <- lapply(df_names_no_numbers, get)
# Merge all data frames by 'subject_id' using Reduce
combined_metrics_df <- Reduce(function(x, y) merge(x, y, by = "id", all = TRUE), df_list2)
## Get all measures from 16 subjects and save them (combine later)
active_pct_all <- active_percent(combined_df, tz = "GMT") #gives time zone error
# Combine all dataframes into one to use visualisations from iglu
combined_df1 <- bind_rows(df_list)
## Get all measures from 16 subjects and save them (combine later)
active_pct_all <- active_percent(combined_df1, tz = "GMT") #gives time zone error
adrr_all <- adrr(combined_df1)
auc_all <- auc(combined_df1)
cogi_all <- cogi(combined_df1)
conga_all <- conga(combined_df1)
cv_all <- cv_glu(combined_df1)
cvm_all <- cv_measures(combined_df1)
ae1c_all <- ea1c(combined_df1)
gmi_all <- gmi(combined_df1)
grade_all <- grade(combined_df1)
grade_eugly_all <- grade_eugly(combined_df1)
grade_hyper_all <- grade_hyper(combined_df1)
grade_hypo_all <- grade_hypo(combined_df1)
gvp_all <- gvp(combined_df1)
hbgi_all <- hbgi(combined_df1)
lbgi_all <- lbgi(combined_df1)
igc_all <- igc(combined_df1)
iqr_all <- iqr_glu(combined_df1)
j_index_all <- j_index(combined_df1)
mad_all <- mad_glu(combined_df1)
mag_all <- mag(combined_df1)
mage_all <- mage(combined_df1)
mean_all <- mean_glu(combined_df1)
median_all <- median_glu(combined_df1)
modd_all <- modd(combined_df1)
m_value_all <- m_value(combined_df1)
above_pct_all <- above_percent(combined_df1)
below_pct_all <- below_percent(combined_df1)
pct_in_all <- in_range_percent(combined_df1)
quantiles_all <- quantile_glu(combined_df1)
range_all <- range_glu(combined_df1)
#roc_all <- roc(combined_df,timelag = 15, dt0 = NULL, inter_gap = 45, tz = "GMT")
sd_roc_all <- sd_roc(combined_df1)
sd_all <- sd_glu(combined_df1)
sd_measures_all <- sd_measures(combined_df1, tz = "GMT") #gives time zone error
all_objects <- ls()
# Filter only data frames without numbers in their names
df_names_no_numbers <- all_objects[
sapply(all_objects, function(obj) is.data.frame(get(obj))) &
!grepl("[0-9]", all_objects)
]
# Collect these data frames into a list
df_list2 <- lapply(df_names_no_numbers, get)
# Merge all data frames by 'subject_id' using Reduce
combined_metrics_df <- Reduce(function(x, y) merge(x, y, by = "id", all = TRUE), df_list2)
View(combined_metrics_df)
all_objects <- ls()
# Filter only data frames without numbers in their names
df_names_no_numbers <- all_objects[
sapply(all_objects, function(obj) is.data.frame(get(obj))) &
!grepl("[0-9]", all_objects)
]
# Collect these data frames into a list
df_list2 <- lapply(df_names_no_numbers, get)
# Merge all data frames by 'subject_id' using Reduce
combined_metrics_df <- Reduce(function(x, y) {
merged <- merge(x, y, by = "id", all = TRUE)
# Reorder columns: 'id' first, then columns in order of x and y
ordered_cols <- c("id", setdiff(colnames(x), "id"), setdiff(colnames(y), "id"))
merged[, ordered_cols]
}, df_list)
# Collect these data frames into a list
df_list2 <- lapply(df_names_no_numbers, get)
# Merge all data frames by 'subject_id' using Reduce
combined_metrics_df <- Reduce(function(x, y) {
merged <- merge(x, y, by = "id", all = TRUE)
# Reorder columns: 'id' first, then columns in order of x and y
ordered_cols <- c("id", setdiff(colnames(x), "id"), setdiff(colnames(y), "id"))
merged[, ordered_cols]
}, df_list2)
# Merge all data frames by 'subject_id' using Reduce
combined_metrics_df <- Reduce(function(x, y) {
merged <- merge(x, y, by = "id", all = TRUE)
# Reorder columns: 'id' first, then columns in order of x and y
ordered_cols <- c("id", setdiff(colnames(x), "id"), setdiff(colnames(y), "id"))
merged[, ordered_cols]
}, df_list2)
View(df_list2)
View(gmi_all)
# Merge all data frames by 'id' using Reduce
combined_metrics_df <- Reduce(function(x, y) {
merged <- merge(x, y, by = "id", all = TRUE)
# Create column order: 'id' first, then columns from x and y in original order
ordered_cols <- c("id",
setdiff(colnames(x), "id"),
setdiff(colnames(y), "id"))
# Only select columns that exist in the merged dataframe
ordered_cols <- ordered_cols[ordered_cols %in% colnames(merged)]
merged[, ordered_cols, drop = FALSE]
}, df_list2)
View(combined_metrics_df)
# Collect these data frames into a list
df_list2 <- lapply(df_names_no_numbers, get)
# Merge all data frames by 'id' using Reduce
combined_metrics_df <- Reduce(function(x, y) {
merged <- merge(x, y, by = "id", all = TRUE)
# Create column order: 'id' first, then columns from x and y in original order
ordered_cols <- c("id",
setdiff(colnames(x), "id"),
setdiff(colnames(y), "id"))
# Only select columns that exist in the merged dataframe
ordered_cols <- ordered_cols[ordered_cols %in% colnames(merged)]
merged[, ordered_cols, drop = FALSE]
}, df_list2)
View(combined_metrics_df)
above_percent(df_01)
# Directory to save CSV files (change to your preferred path)
output_dir <- "C:\Users\jvaldovin\Desktop\cgmquantify-practice\metrics"
# Directory to save CSV files (change to your preferred path)
output_dir <- "C:/Users/jvaldovin/Desktop/cgmquantify-practice/metrics"
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
# Loop through each subject (row) and create a CSV
for (i in 1:nrow(combined_metrics_df)) {
# Define file path for the subject
file_path <- file.path(output_dir, paste0("subject_0", i, ".csv"))
# Create a data frame with file path + subject measurements
subject_data <- data.frame(
file_path = file_path,
combined_metrics_df[i, , drop = FALSE]
)
# Write the subject data to a CSV file
write.csv(combined_metrics_df, file = file_path, row.names = FALSE)
cat(paste("Saved:", file_path, "\n"))
}
# Loop through each subject (row) and create a CSV
for (i in 1:nrow(combined_metrics_df)) {
# Define file path for the subject
file_path <- file.path(output_dir, paste0("subject_0", i, ".csv"))
# Create a data frame with file path + subject measurements
subject_data <- data.frame(
file_path = file_path,
combined_metrics_df[i, , drop = FALSE]
)
# Write the subject data to a CSV file
write.csv(subject_data, file = file_path, row.names = FALSE)
cat(paste("Saved:", file_path, "\n"))
}
# Loop through each subject (row) and create a CSV
cgm_file_path <- "C:\Users/jvaldovin/Desktop/cgmquantify-practice/iglu_formatted"
for (i in 1:nrow(combined_metrics_df)) {
# Define file path for the subject
file_path <- file.path(output_dir, paste0("subject_0", i, ".csv"))
# Create a data frame with file path + subject measurements
subject_data <- data.frame(
file_path = cgm_file_path,
combined_metrics_df[i, , drop = FALSE]
)
# Write the subject data to a CSV file
write.csv(subject_data, file = file_path, row.names = FALSE)
cat(paste("Saved:", file_path, "\n"))
}
# Loop through each subject (row) and create a CSV
cgm_file_path <- "C:\Users/jvaldovin/Desktop/cgmquantify-practice/iglu_formatted"
# Loop through each subject (row) and create a CSV
cgm_file_path <- "C:/Users/jvaldovin/Desktop/cgmquantify-practice/iglu_formatted"
for (i in 1:nrow(combined_metrics_df)) {
# Define file path for the subject
file_path <- file.path(output_dir, paste0("subject_0", i, ".csv"))
# Create a data frame with file path + subject measurements
subject_data <- data.frame(
file_path = cgm_file_path,
combined_metrics_df[i, , drop = FALSE]
)
# Write the subject data to a CSV file
write.csv(subject_data, file = file_path, row.names = FALSE)
cat(paste("Saved:", file_path, "\n"))
}
